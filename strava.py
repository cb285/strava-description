#!/usr/bin/env python3

import requests
import json
import time

def get_activity_data(activity, key, default='Unknown'):
    val = activity.get(key, None)
    if val is None:
        return default
    else:
        return val

def strip_non_ascii(string):
    stripped = (c for c in string if 0 < ord(c) < 127)
    return ''.join(stripped)

# Get the tokens from file to connect to Strava
with open('strava_tokens.json') as json_file:
    strava_tokens = json.load(json_file)# If access_token has expired then 
# use the refresh_token to get the new access_token
if strava_tokens['expires_at'] < time.time():# Make Strava auth API call with current refresh token
    response = requests.post(
                        url = 'https://www.strava.com/oauth/token',
                        data = {
                                'client_id': 'xxx',
                                'client_secret': 'xxx',
                                'grant_type': 'refresh_token',
                                'refresh_token': strava_tokens['refresh_token']
                                }
                    )# Save response as json in new variable
    new_strava_tokens = response.json()# Save new tokens to file
    with open('strava_tokens.json', 'w') as outfile:
        json.dump(new_strava_tokens, outfile)# Use new Strava tokens from now
    strava_tokens = new_strava_tokens# Open the new JSON file and print the file contents 

access_token = strava_tokens['access_token']
strava_headers = {'Authorization': f'Bearer {access_token}', 'Content-Type': 'application/json', 'accept': 'application/json'}

# get epoch time a day ago
after_time = time.time() - 24*60*60

r = requests.get('https://www.strava.com/api/v3/athlete/activities', headers=strava_headers, params={'after': after_time})
activities = r.json()

#with open('activities.json', 'r') as file:
#    activities = json.load(file)

#print(json.dumps(activities, indent=4))

'''
Moving Time: {activity["moving_time"]/60:.2f} minutes
Highest Elevation: {activity["elev_high"]*3.28084:.1f} feet
Lowest Elevation: {activity["elev_low"]*3.28084:.1f} feet
Achievement Count: {activity["achievement_count"]}
Personal Record Count: {activity["pr_count"]}
Average Speed: {activity["average_speed"]} meters per second
Max Speed: {activity["max_speed"]} meters per second
Elasped Time: {activity["elapsed_time"]/60:.1f} minutes
Elevation Gain: {activity["total_elevation_gain"]*3.28084:.1f} feet
Type: {activity["type"]}
Sport: {activity["sport_type"]}
'''

for activity in activities:

    r = requests.get(f'https://www.strava.com/api/v3/activities/{activity["id"]}', headers=strava_headers)
    activity = r.json()
    #print(json.dumps(activity, indent=4))

    print(f'id: {get_activity_data(activity, "id")}')
    print(f'title: {get_activity_data(activity, "name")}')
    print(f'description: {get_activity_data(activity, "description")}')

    # skip already updated activities
    if 'Title generated by AI' in get_activity_data(activity, 'description'):
        print("already updated")
        continue

    # start time
    # example: "2025-01-16T16:17:36Z",
    start_time = time.strftime('%A %m/%d/%Y', time.strptime(get_activity_data(activity, "start_date_local"), '%Y-%m-%dT%H:%M:%SZ'))

    # elapsed time
    elapsed_time_minutes = 'Unknown'
    if activity.get("elapsed_time", None) is not None:
        elapsed_time_minutes = f'{activity.get("elapsed_time", None)/60:.1f}'

    # location
    location = 'Unknown'
    latlng = activity.get("start_latlng", None)
    if (latlng is not None) and (len(latlng) == 2):
        location = f'{latlng[0]}, {latlng[1]}'

    # distance
    distance_miles = 'Unknown'
    raw_distance = activity.get("distance", None)
    if raw_distance is not None:
        distance_miles = f'{raw_distance/1609.344:.1f}'

    formatted_activity = f'''
Name: {get_activity_data(activity, "name")}
Started at: {start_time}
Location: {location}
Distance: {distance_miles} miles
Elasped Time: {elapsed_time_minutes} minutes
Average Heartrate: {get_activity_data(activity, "average_heartrate")}
Max Heartrate: {get_activity_data(activity, "max_heartrate")}
'''

    print(formatted_activity)

    query = f'''
    What's a fun title for this strava activity? Consider the location, day, distance, etc. Use modern slang. Only respond with the one title and don't use non-ascii characters.

    {formatted_activity}
    '''

    gemini_api_key = 'xxx'

    headers = {'Content-Type': 'application/json'}
    data = {
        'contents': [{
            'parts': [
                {
                    'text': query
                }
            ]
        }],
    }

    r = requests.post(f'https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key={gemini_api_key}', headers=headers, json=data)
    response = r.json()

    new_title = strip_non_ascii(response['candidates'][0]['content']['parts'][0]['text'].strip())
    if activity.get('description', None) is None:
        old_description = ''
    else:
        old_description = activity["description"]

    new_description = old_description + '\nTitle generated by AI'

    print(f'New Title: {new_title}')
    print(f'New Description: {new_description}')

    data = {
        'commute': activity['commute'],
        'trainer': activity['trainer'],
        'hide_from_home': activity.get('hide_from_home', False),
        'name': new_title,
        'description': new_description,
        'sport_type': activity['sport_type'],
        'gear_id': activity['gear_id'],
    }

    r = requests.put(f'https://www.strava.com/api/v3/activities/{activity["id"]}', headers=strava_headers, json=data)
    print(r.text)
